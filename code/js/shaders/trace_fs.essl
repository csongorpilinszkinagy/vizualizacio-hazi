Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `
	precision highp float;
	uniform vec3 eye;
	uniform sampler2D volume;
	uniform sampler2D texture;

	varying vec3 rayDir;

	bool inCube(vec3 pos, float x, float y, float z) {
		if (pos.x > x && pos.x < x + 1.0 && pos.y > y && pos.y < y + 1.0 && pos.z > z && pos.z < z + 1.0)
			return true;
		return false;
	}

	vec2 inTexCoord(vec3 pos) {
		float modZ = mod(pos.z, 16.0);
		return (vec2(pos.x, -pos.y) + vec2(modZ * 256.0, (pos.z - modZ) * 16.0)) / 4096.0;
	}

	float sampleVolume(vec3 pos) {

		vec3 pos256 = pos * 256.0;
		vec3 discPos = vec3(floor(pos256.x), floor(pos256.y), floor(pos256.z));
		
		float tex1 = texture2D(volume, inTexCoord(discPos)).x;
		/*float tex3
		float tex4
		float tex5
		float tex6
		float tex7
		float tex8*/

		return tex1;
	}

	void main() {
		vec3 d = normalize(rayDir);

		vec3 pos = eye;
		for (int i=0; i< 1000; i++) {
			if (inCube(pos, 0.0, 0.0, 0.0)) {
				if (sampleVolume(pos) > 0.04) {
					gl_FragColor = vec4(sampleVolume(pos), sampleVolume(pos), sampleVolume(pos), 1.0);
					return;
				}
			}
			pos += rayDir * 0.01;
		}
		gl_FragColor = vec4(0.0, 1.0, 0.0, 1.0); 
	}
`;