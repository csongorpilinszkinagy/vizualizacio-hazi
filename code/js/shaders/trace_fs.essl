Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `
	precision highp float;
	uniform vec3 eye;
	uniform sampler2D volume;
	uniform sampler2D texture;

	float WIDTH = 256.0;
	float NUM = 16.0;
	float EPSILON = 0.001;
	float THRESHOLD = 0.05;

	varying vec3 rayDir;

	// position inside the [0, 1] cube
	bool inCube(vec3 pos) {
		if (pos.x > 0.0 && pos.x < 1.0 && pos.y > 0.0 && pos.y < 1.0 && pos.z > 0.0 && pos.z < 1.0)
			return true;
		return false;
	}

	// 3D coordinates in 2D image coordinates
	vec2 inTexCoord(vec3 pos) {
		float modZ = mod(floor(pos.z * WIDTH), NUM);
		return vec2(pos.x, -pos.y) / NUM + vec2(modZ / NUM, (floor(pos.z * WIDTH) - modZ) / NUM / NUM);
	}

	// return intensity value
	float sampleVolume(vec3 pos) {
		if (!inCube(pos)) return 0.0;

		vec3 posDisc = vec3(floor(pos.x * WIDTH) / WIDTH, floor(pos.y * WIDTH) / WIDTH, floor(pos.z * WIDTH) / WIDTH);

		// 8 points around pos
		vec2 coord1 = inTexCoord(posDisc);
		vec2 coord2 = inTexCoord(posDisc + vec3(0.0, 0.0, 1.0/WIDTH));
		vec2 coord3 = inTexCoord(posDisc + vec3(0.0, 1.0/WIDTH, 0.0));
		vec2 coord4 = inTexCoord(posDisc + vec3(0.0, 1.0/WIDTH, 1.0/WIDTH));
		vec2 coord5 = inTexCoord(posDisc + vec3(1.0/WIDTH, 0.0, 0.0));
		vec2 coord6 = inTexCoord(posDisc + vec3(1.0/WIDTH, 0.0, 1.0/WIDTH));
		vec2 coord7 = inTexCoord(posDisc + vec3(1.0/WIDTH, 1.0/WIDTH, 0.0));
		vec2 coord8 = inTexCoord(posDisc + vec3(1.0/WIDTH, 1.0/WIDTH, 1.0/WIDTH));

		// 8 intensity values to 8 points
		float sample1 = texture2D(volume, coord1).x;
		float sample2 = texture2D(volume, coord2).x;
		float sample3 = texture2D(volume, coord3).x;
		float sample4 = texture2D(volume, coord4).x;
		float sample5 = texture2D(volume, coord5).x;
		float sample6 = texture2D(volume, coord6).x;
		float sample7 = texture2D(volume, coord7).x;
		float sample8 = texture2D(volume, coord8).x;

		// trilinear interpolation
		float mix1 = mix(sample1, sample2, fract(pos.z * WIDTH));
		float mix2 = mix(sample3, sample4, fract(pos.z * WIDTH));
		float mix3 = mix(sample5, sample6, fract(pos.z * WIDTH));
		float mix4 = mix(sample7, sample8, fract(pos.z * WIDTH));

		float mix5 = mix(mix1, mix2, fract(pos.y * WIDTH));
		float mix6 = mix(mix3, mix4, fract(pos.y * WIDTH));

		float mix7 = mix(mix5, mix6, fract(pos.x * WIDTH));

		return mix7;
	}

	void main() {
		vec3 d = normalize(rayDir);

		float t1 = (1.0 - eye.y) / d.y;
		float t2 = (0.0 - eye.y) / d.y;

		float t_start = max(min(t1, t2), 0.0);
		float t_end = max(max(t1, t2), 0.0);

		vec3 pos = eye + t_start * d;
		float step = min((t_end - t_start) / 200.0, 0.01);

		// rough ray marching
		for (int i = 0; i < 200; i++) {
			float sample = sampleVolume(pos);
			if (sample > THRESHOLD)
				break;
			pos += d * step;
		}

		pos -= step * d;

		step = 0.0001;

		// fine ray marching
		for (int i = 0; i < 100; i++) {
			float sample = sampleVolume(pos);
			if (sample > THRESHOLD)
				break;
			pos += d * step;
		}

		float sample = sampleVolume(pos);

		// calculate normal calculate the vector in ray direction and sample color
		if (sample > THRESHOLD) {
			vec3 grad = vec3(
				(sampleVolume(pos + vec3(EPSILON, 0.0, 0.0)) - sampleVolume(pos + vec3(-EPSILON, 0.0, 0.0))),
				(sampleVolume(pos + vec3(0.0, EPSILON, 0.0)) - sampleVolume(pos + vec3(0.0, -EPSILON, 0.0))),
				(sampleVolume(pos + vec3(0.0, 0.0, EPSILON)) - sampleVolume(pos + vec3(0.0, 0.0, -EPSILON)))
			);

			vec3 norm = -normalize(grad);

			vec3 right = normalize(cross(d, vec3(0.0, 1.0, 0.0)));
			vec3 up = normalize(cross(right, d));

			float projUp = dot(up, norm);
			float projRight = dot(right, norm);
			
			vec4 color = texture2D(texture, vec2(projRight, -projUp) /2.0 + vec2(0.5, 0.5));
			gl_FragColor = color;
			return;
		}

		// default background color
		gl_FragColor = vec4(0.2, 0.5, 0.5, 1.0); 
	}
`;